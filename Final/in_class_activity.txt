greet :-
    write('What is your name? '),
    read_line_to_string(user_input, Name),
    write('Hello, '),
    write(Name),
    write('! Nice to meet you.').

get_number :-
    write('Enter a number: '),
    read(X),
    (number(X) -> write('You entered a number: '), write(X) ; write('Error: not a number.')),
    nl.

get_string :-
    write('Enter a string: '),
    read_line_to_codes(user_input, Codes),
    string_codes(String, Codes),
    write('You entered: '),
    write(String),
    nl.
get_greatest :-
    write('Enter the first number: '),
    read(X),
    (number(X) -> write('You entered a number: '), write(X) ; write('Error: not a number.')),nl,
    write('Enter the second number: '),
    read(Y),
    (number(Y) -> write('You entered a number: '), write(Y) ; write('Error: not a number.')),nl,
    write('Enter the third number: '),
    read(Z),
    (number(Z) -> write('You entered a number: '), write(Z) ; write('Error: not a number.')),nl,
    (X >= Y, X >= Z ->
        write('The greatest number is '), write(X), nl; 
    Y >= Z ->
        write('The greatest number is '), write(Y), nl;
        write('The greatest number is '), write(Z), nl
    ).
get_greatest_loop :-
    repeat,
    write('Enter the first number (or "quit" to exit): '),
    read(X),
    (X == quit -> !
    ; write('Enter the second number: '),
      read(Y),
      write('Enter the third number: '),
      read(Z),
      (X >= Y, X >= Z ->
          write('The greatest number is '), write(X), nl
      ; Y >= Z ->
          write('The greatest number is '), write(Y), nl
      ;
          write('The greatest number is '), write(Z), nl
      ),
      fail
    ).

%excercise same code but with validation of input




factorial(0, 1).
factorial(N, F) :-
    N > 0,
    N1 is N - 1,
    factorial(N1, F1),
    F is N * F1.


list_concat([],L,L).
list_concat([X1|L1],L2,[X1|L3]) :- list_concat(L1,L2,L3).

list_rev([],[]).
list_rev([Head|Tail],Reversed) :-
   list_rev(Tail, RevTail),list_concat(RevTail, [Head],Reversed).


factorial(0, 1).
factorial(N, F) :-
    N > 0,
    N1 is N - 1,
    factorial(N1, F1),
    F is N * F1.
